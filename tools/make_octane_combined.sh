#!/usr/bin/env bash
set -euo pipefail

# location of octane dir (adjust if different)
OCT_DIR="octane"
OUT="$OCT_DIR/combined.js"

# explicit ordering (same list used by your C runner earlier)
SCRIPTS=(
  "octane/base.js"
  "octane/richards.js"
  "octane/deltablue.js"
  "octane/crypto.js"
  "octane/raytrace.js"
  "octane/earley-boyer.js"
  "octane/regexp.js"
  "octane/splay.js"
  "octane/navier-stokes.js"
  "octane/pdfjs.js"
  "octane/mandreel.js"
  "octane/gbemu-part1.js"
  "octane/gbemu-part2.js"
  "octane/code-load.js"
  "octane/box2d.js"
  "octane/zlib.js"
  "octane/zlib-data.js"
  "octane/typescript.js"
  "octane/typescript-input.js"
  "octane/typescript-compiler.js"
  "run_octane.js"
)

echo "Creating $OUT (overwrite if exists)"
printf "%s\n\n" "// Octane combined runner â€” autogenerated" > "$OUT"
# small shim so browser-like globals exist in non-browser engines
cat >> "$OUT" <<'JS'
// shim globalThis/window/self for engines that expect browser globals
(function(global){
  if (typeof globalThis !== 'undefined') global = globalThis;
  if (typeof global.window === 'undefined') global.window = global;
  if (typeof global.self === 'undefined')   global.self   = global;
})(typeof globalThis !== 'undefined' ? globalThis : this);
JS
echo "" >> "$OUT"

# append each script in order (if exists)
for s in "${SCRIPTS[@]}"; do
  if [ -f "$s" ]; then
    echo "Appending $s"
    printf "\n// --- $s ---\n" >> "$OUT"
    cat "$s" >> "$OUT"
    echo >> "$OUT"
  else
    echo "Warning: missing $s, skipping"
  fi
done

echo "Wrote $OUT"
